module vga_sync (
	input logic clk,
   output logic hsync,
   output logic vsync,
   output logic [2:0] rgb,
	// sonradan eklenenler
	input logic [15:0] x_spaceship,
	input logic [15:0] y_spaceship,
	input logic [15:0] x_planet,
	input logic [15:0] y_planet,
	input logic [15:0] spaceship_bitmap[0:15],
	input logic [15:0] planet_bitmap[0:15]
);

logic pixel_tick, video_on;
logic [9:0] h_count;
logic [9:0] v_count;
logic [3:0] index_count;
logic [3:0] bit_count;

localparam HD       = 640, //horizontal display area
			  HF       = 48,  //horizontal front porch
			  HB       = 16,  //horizontal back porch
			  HFB      = 96,  //horizontal flyback
			  VD       = 480, //vertical display area
			  VT       = 10,  //vertical top porch
			  VB       = 33,  //vertical bottom porch
			  VFB      = 2,   //vertical flyback
			  LINE_END = HF + HD + HB + HFB - 1,
			  PAGE_END = VT + VD + VB + VFB - 1;

always_ff @(posedge clk)
	begin
		pixel_tick <= ~pixel_tick; //25 MHZ signal is generated.
		
		if (bit_count == 4'hf)
            begin
                bit_count <= 4'h0;
                if (index_count == 4'hf)
                    index_count <= 4'h0;
                else
                    index_count <= index_count + 1;
            end
        else
            bit_count <= bit_count + 1;
	end

//=====Manages hcount and vcount======
always_ff @(posedge clk)
	begin
		if (pixel_tick) 
			begin
				if (h_count == LINE_END)
					begin
						h_count <= 0;
						if (v_count == PAGE_END)
							v_count <= 0;
						else
							v_count <= v_count + 1;
					end
				else
					h_count <= h_count + 1;
			end
	end

//===================== color generation =================
//== origin of display area is at (h_count, v_count) = (0,0) ===
always_comb
	begin
		rgb = 3'b000;
		// Check if the pixel is within the display area
		if ((h_count < HD) && (v_count < VD))
			begin
				 // Check if the pixel is within the spaceship_bitmap
				 if ((h_count >= x_spaceship) && (h_count < (x_spaceship + 16)) &&
					  (v_count >= y_spaceship) && (v_count < (y_spaceship + 16)))
					begin
						 // Set the color of the pixel based on the spaceship_bitmap
						 if ((index_count < 16) && (bit_count < 16))
							 begin
								  if (spaceship_bitmap[index_count][bit_count] == 1'b1)
										rgb = 3'b100; // Set to red
								  else
										rgb = 3'b011;
							 end
						  else
								rgb = 3'b101;
					end


				 else
					 begin
						  // Paint the pixel to the background color (green)
						  rgb = 3'b111;
					 end
			end
	end

//=======hsync and vsync will become 1 during flybacks.=======
//== origin of display area is at (h_count, v_count) = (0,0)===
assign hsync = (h_count >= (HD + HB) && h_count <= (HFB + HD + HB - 1));
assign vsync = (v_count >= (VD + VB) && v_count <= (VD + VB + VFB - 1));

initial
	begin
		h_count = 0;
		v_count = 0;
		index_count = 0;
		bit_count = 0;
		pixel_tick = 0;
	end

endmodule